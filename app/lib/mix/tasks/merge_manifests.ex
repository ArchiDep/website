defmodule Mix.Tasks.MergeManifests do
  @shortdoc "Merges multiple Phoenix cache manifests into one"
  @moduledoc "A task to merge multiple Phoenix cache manifests into one."

  use Mix.Task

  @impl Mix.Task
  def run(_args) do
    static_dir = Path.join(:code.priv_dir(:archidep), "static")

    first_manifest_file = Path.join(static_dir, "cache_manifest.json")
    first_manifest = JSON.decode!(File.read!(first_manifest_file))

    %{
      "!comment!" => _comment,
      "version" => 1,
      "latest" => %{} = first_latest,
      "digests" => %{} = first_digests
    } = first_manifest

    ["!comment!", "digests", "latest", "version"] = first_manifest |> Map.keys() |> Enum.sort()

    second_manifest_file = Path.join(static_dir, "cache_manifest2.json")
    second_manifest = JSON.decode!(File.read!(second_manifest_file))

    %{
      "!comment!" => _comment,
      "version" => 1,
      "latest" => %{} = second_latest,
      "digests" => %{} = second_digests
    } = second_manifest

    ["!comment!", "digests", "latest", "version"] = second_manifest |> Map.keys() |> Enum.sort()

    File.write!(
      first_manifest_file,
      JSON.encode!(%{
        "!comment!" =>
          "This file was auto-generated by `mix merge_manifests` from #{Path.basename(first_manifest_file)} and #{Path.basename(second_manifest_file)}.",
        "version" => 1,
        "latest" => Map.merge(first_latest, second_latest),
        "digests" => Map.merge(first_digests, second_digests)
      })
    )

    File.rm!(second_manifest_file)

    Mix.shell().info(
      "Merged #{Path.basename(first_manifest_file)} and #{Path.basename(second_manifest_file)} manifests into #{first_manifest_file}"
    )

    :ok
  end
end
