const messages = `
  UHJlcGFyaW5nIHRvIGVuZ2FnZQpVcGdyYWRpbmcgbmFuby1hdWdtZW50YXRpb25zCkNhbGxpbmcgdG
  hlIGJhbGwKRGV0ZWN0aW5nIGFub21hbGllcwpUcmFuc21pdHRpbmcgb3JkZXJzCkNhbGlicmF0aW5n
  IHZvaWQgbGVuc2VzClVwZ3JhZGluZyBzaGllbGRzCkNvbXBsZXRpbmcgbWVyZ2UKUmVjcnVpdGluZy
  BzcXVhZG1hdGVzCkxvY2tpbmcgZmxpZ2h0IHBsYW4KU3luY2luZyB3aXRoIFNreW5ldApRdWVzdGlv
  bmluZyBtZW1vcmllcwpPdmVycG93ZXJpbmcgZGFya25lc3MKQ29tcGxldGluZyBtaXNzaW9ucwpXYW
  tpbmcgdXAKSW5jcmVhc2luZyBwb3dlcgpGaW5kaW5nIGhvcmNydXhlcwpSZWJvb3RpbmcgaG9sb2Rl
  Y2sKVXBncmFkaW5nIGtlZXAKQ2FsbGluZyBpbiB0aGUgZmxlZXQKVW5sb2NraW5nIG15c3RlcmlvdX
  MgZG9vcnMKQ291bnRpbmcgZG93bgpBbmFseXppbmcgdGVjaApBdXRvbWF0aW5nIHByb2Nlc3NlcwpB
  dm9pZGluZyByZWFwZXIgaW52YXNpb24KUmVsb2NhdGlvbiBjb21tZW5jaW5nClJhaWRpbmcgbG9zdC
  B0ZW1wbGVzCkJhbGFuY2luZyB0aGUgc2NhbGVzCkFzc3VyaW5nIHZpY3RvcnkKU3luY2hyb25pemlu
  ZyBicmFpbnMKRm9ybXVsYXRpbmcgcGxhbgpTaGFycGVuaW5nIGJsYWRlcwpBY2NlcHRpbmcgb3JkZX
  JzClNlZWtpbmcgZW5saWdodGVubWVudApTcG9vbGluZyBkcml2ZXMKRGlyZWN0aW5nIGVmZm9ydHMK
  U2F2aW5nIHByaW5jZXNzClNjYW5uaW5nIHBsYW5ldHMKVXBncmFkaW5nIHRoZSBOb3JtYW5keQpFbm
  dhZ2luZyB0dXJiaW5lcwpCeXBhc3NpbmcgbGFzZXIgZ3JpZHMKU2V0dGluZyBwaGFzZXJzIHRvIHN0
  dW4KVHVybmluZyB1cCBoZWF0CkNvbXByZXNzaW5nIGRhdGEKU2ltdWxhdGluZyBwaHlzaWNzCkRlcG
  xveWluZyBYLXdpbmdzCkFjdGl2YXRpbmcgRmllbGQKUmV0aWN1bGF0aW5nIHNwbGluZXMKRmFjdG9y
  aW5nIHBvbHlub21pYWxzCkludmVzdGlnYXRpbmcgbXlzdGVyaW91cyBzaWduYWxzClBhcnNpbmcgc3
  lzdGVtCkVhdGluZyBwaXp6YQpDaHJvbm8gYm9vc3RpbmcKTW92aW5nIGludG8gcG9zaXRpb24KRWpl
  Y3RpbmcgZmxvcHB5ClJvdW5kaW5nIGludGVnZXJzClJlbmRlcmluZyBwb2x5Z29ucwpSZWxvYWRpbm
  cgdGhlIG1hdHJpeApDb250YWN0aW5nIHRoZSBvcmFjbGUKQXVnbWVudGluZyB2aXNpb24KTmF2aWdh
  dGluZyBhcnJheXMKRGlhbGluZyBzdGFyZ2F0ZQpNYXBwaW5nIHNlY3JldCBjaGFtYmVycwpEaXNzaX
  BhdGluZyBwc2lvbmljIGxpbmsKRGVmbGVjdGluZyBibGFzdGVycwpDb21wbGV0aW5nIHRoZSBjeWNs
  ZQpQZXJjZWl2aW5nIG9yYWNsZQpDb2xsZWN0aW5nIHJ1bmVzClRyYW5zZmlndXJpbmcKSW50ZWdyYX
  RpbmcgcGFydHMKQWRqdXN0aW5nIG5ldXJhbCB0cmFuc21pc3Npb24KUHJldmFpbGluZwpBY3RpdmF0
  aW5nIGRpc3RvcnRpb24gZmllbGQKRmxpcHBpbmcgdGhlIG1ha28KSW52ZXJ0aW5nIHBvcnRzCkV4dH
  JhcG9sYXRpbmcgc3RyaW5ncwpTY2FubmluZyBsaWZlZm9ybXMKUmVwYWlyaW5nIGRlZmxlY3RvcgpD
  aGVja2luZyBzZW5zb3JzClJlbWFpbmluZyB2aWdpbGFudApGdWVsaW5nIHVwClNvbHZpbmcgYW5jaW
  VudCBwdXp6bGVzClRha2luZyByZWQgcGlsbApTZXR0aW5nIGNvdXJzZQpNb3ZpbmcgdW5zZWVuClJ1
  bm5pbmcgbGV2ZWwgb25lIGRpYWdub3N0aWNzCkdhdGhlcmluZyBsdW1iZXIKQXZvaWRpbmcgYXN0ZX
  JvaWRzCkRlY3J5cHRpbmcgbWFpbmZyYW1lClJldmVyc2luZyBiYW5kd2lkdGgKRmluZGluZyBYCkF3
  YWl0aW5nIGxhdW5jaCBvcmRlcnMKQ29sbGVjdGluZyBwb3dlci11cHMKU2Nhbm5pbmcgYmF0dGxlZm
  llbGQgY29uZGl0aW9ucwpEaXJlY3Rpbmcgb3ZlcmxvYWQKUGllY2luZyB0b2dldGhlciBjbHVlcwpF
  bXB0eWluZyBwaXBlcwpSb2xsaW5nIGRyaXZlcnMKQ2hhcnRpbmcgY291cnNlCkNhbGN1bGF0aW5nIG
  Rlcml2YXRpdmVzClNlYXJjaGluZyBiYXNlbWVudApGZWVkaW5nIGRldmVsb3BlcnMKQnVpbGRpbmcg
  bGlnaHRzYWJlcgpQb25kZXJpbmcgZXhpc3RlbmNlCkNoZWNraW5nIHRvd2VsCkNvbGxlY3Rpbmcgcm
  VsaWNzClJvbGxpbmcgb3V0ClBvbGlzaGluZyBsaWdodHNhYmVycwpTZXR0aW5nIHBhdGgKUXVlc3Rp
  b25pbmcgcmVhbGl0eQpMb2NraW5nIGJlYW1zCkNvbnRpbnVpbmcgZXZvbHV0aW9uClJ1bm5pbmcgZ2
  lncwpJbml0aWF0aW5nIGNoZWNrbGlzdCBwcm90b2NvbApDYWxpYnJhdGluZyBwYXR0ZXJuClZpc2l0
  aW5nIHRoZSBjaXRhZGVsCkRlYnVnZ2luZyByZXBsaWNhbnRzClN3aW5naW5nIGFjcm9zcyBjaGFzbX
  MKRmluZGluZyBsaW1pdApCZW5jaGluZyB3YXR0YWdlCkNvbnN0cnVjdGluZyBhZGRpdGlvbmFsIHB5
  bG9ucwpQb25kZXJpbmcgbWVhbmluZwpSZWRpcmVjdGluZyB0cm9sbGV5Cldhc3RpbmcgdGltZQpBY3
  RpdmF0aW5nIGtpbmV0aWMgbWF0cml4CkFjY2VsZXJhdGluZyBkaXNrcwpEZWZlbmRpbmcgdHJlZQpS
  ZXBhaXJpbmcgaHlwZXJkcml2ZQpSZXBhaXJpbmcgZXF1aXBtZW50CkVuZ2FnaW5nIHdhcnAgZHJpdm
  UKQ29uZmlybWluZyBqb2IKT3BlbmluZyBoYWlsaW5nIGZyZXF1ZW5jaWVzClVwZ3JhZGluZyBSQU0K
  QXdhaXRpbmcgZGVzdGlueQpDb21wbGV0aW5nIGdlb21ldHJ5CkRlcGxveWluZyB0YWNoaWtvbWFzCl
  VwZ3JhZGluZyBzdGVhbHRoIHN5c3RlbXMKRXZhZGluZyBwYXRyb2xzCkNvcHlpbmcgdGhhdApUZXN0
  aW5nIHByb2Nlc3NvcgpOb3QgcGFuaWNraW5nCkFjdGl2YXRpbmcgaXJpcwpSZWdpc3RlcmluZyBjb2
  1tYW5kIGF1dGhvcml0eQpDb2xsZWN0aW5nIG11bHRpdG9vbHMKQW5hbHl6aW5nIHByaW1lIHJhZGlh
  bnQKRG9kZ2luZyBidWxsZXRzClJlY2VpdmluZyBvcmRlcnMKVHJhbnNtaXR0aW5nIGNvb3JkaW5hdG
  VzCkNoYXJnaW5nIHBoYXNlIGNyeXN0YWxzCkZvbGxvd2luZyB3aGl0ZSByYWJiaXQKT3B0aW1pemlu
  ZyBwYXRoZmluZGluZwpXYXJwaW5nIHB5bG9ucwpMb2NraW5nIHZlY3RvcgpDaGVja2luZyBlbWFpbA
  pNZWFzdXJpbmcgYW5nbGVzClJlcXVlc3RpbmcgaW1wcm9iYWJpbGl0eQpEZWZlYXRpbmcgY3JlZXBl
  cnMKQXNzaWduaW5nIG5hdmlnYXRpb24KRml4aW5nIGNsb2NrCkNhdGNoaW5nIGdvbGRlbiBzbml0Y2
  gKQXdha2VuaW5nIGNvbnNjaW91c25lc3MKUHJpbWluZyBzeXN0ZW1zCkF2b2lkaW5nIGZpcmV3YWxs
  cwpIYWNraW5nIHRlcm1pbmFscwpSZWNlaXZpbmcgdHJhbnNtaXNzaW9uClF1ZXN0aW9uaW5nIGlkZW
  50aXR5Ck9wZW5pbmcgY2hhbm5lbApTZXJ2aW5nIGp1c3RpY2UKVW5jb3ZlcmluZyBoaWRkZW4gcGFz
  c2FnZXMKTGVha2luZyBtZW1vcnkKQ2FsaWJyYXRpbmcgdHJpY29yZGVyCkRyZWFtaW5nIG9mIGVsZW
  N0cmljIHNoZWVwClJhY2luZyBwb2RzCkNoYXJnaW5nIGtpbmV0aWMgbWF0cml4ClJlcGFpcmluZyBo
  dWxsCkdlbmVyYXRpbmcgMS4yMSBnaWdhd2F0dApDYWxpYnJhdGluZyBwb3NpdGlvbnMKTGlnaHRpbm
  cgaXQgdXAKQ29tcGxldGluZyBjaGVja2xpc3QKT3BlbmluZyBwb3J0YWxzClBhdGNoaW5nIHZ1bG5l
  cmFiaWxpdGllcwpEZWxpdmVyaW5nIHJlaW5mb3JjZW1lbnRzCkZpZ2h0aW5nIGZpcmUgd2l0aCBmaX
  JlClNlYXJjaGluZyB0cnV0aApDaG9vc2luZyBkZXN0aW55CkNhcnJ5aW5nIG9uClJlcG9ydGluZyBm
  b3IgYWN0aW9uCkFkdmFuY2luZwpFc3RhYmxpc2hpbmcgdmVjdG9yCkRlY2lwaGVyaW5nIGhpZXJvZ2
  x5cGhzClJlZW5nYWdpbmcgcmVmcmFjdGlvbiBpbmhpYml0b3JzCkNoZWNraW5nIHJhZGlvCkRpcmVj
  dGluZyB3cmF0aApCcmluZ2luZyBpdCBvbgpSZXNwYXduaW5nIGNyZWVwZXJzCkp1bXBpbmcgcm9vZn
  RvcHMKUmVzdG9yaW5nIHBvd2VyCkNvdW50aW5nIHByaW1lcwpDb21wdXRpbmcgbWVhbmluZyBvZiBs
  aWZlClVubG9ja2luZyBzZWNyZXQgcGFzc2FnZXMKQ29udGFpbmluZyBodWxsIGJyZWFjaApNZWRpdG
  F0aW5nClRyYW5zbGF0aW5nIGFuY2llbnQgdGV4dHMKTmVnb3RpYXRpbmcgcGVhY2UgdHJlYXRpZXMK
  UmVpbmZvcmNpbmcgcHNpLXdlYgpTb2x2aW5nIGVxdWF0aW9ucwpNYWtpbmcgaXQgaGFwcGVuCkV4cG
  xvcmluZyBydWlucwpGaWxsaW5nIGJ1Y2tldHMKSG92ZXJib2FyZGluZwpDb250ZW1wbGF0aW5nIHJl
  YWxpdHkKU3luY2hyb25pemluZyB1bml0ClJlYWNoaW5nIDg4bXBoClByaW1pbmcgcGhhc2UgZGlzcn
  VwdG9ycwpDb25uZWN0aW5nIGJ1cwpTaGVkZGluZyBjb3JlCkJ5cGFzc2luZyBjYXBhY2l0b3IKTWVl
  dGluZyBmYXRlCkRlc2lnbmF0aW5nIHRhcmdldApSaWRpbmcgbWluZWNhcnRzCkRvd25sb2FkaW5nIH
  NraWxscwpGaXJpbmcgaXQgdXAKVGFraW5nIGl0IHNsb3cKUmVib290aW5nIHRoZSBtYXRyaXgKUHVz
  aGluZyBwaXhlbHMKU29sdmluZyBzdWRva3UKTGlnaHRpbmcgdG9yY2hlcwpGaWxsaW5nIGdhcyBjYW
  5pc3RlcnMKVmlydHVhbGl6aW5nIG1pY3JvY2hpcApUcmFuc3BvcnRpbmcgY3JldwpDYWxjdWxhdGlu
  ZyByYXRpbwpHYXRoZXJpbmcgZW5vdWdoIG1pbmVyYWxzCkFjdGl2YXRpbmcgZ2Vhc3MKUmVwcm9ncm
  FtbWluZyB0ZXJtaW5hdG9ycwpEb3dubG9hZGluZyBvcmRlcnMKUmVjb3ZlcmluZyBhcnRpZmFjdHMK
  UHVtcGluZyBnYXMKRmlnaHRpbmcgY29sbGVjdG9ycwpCZW5kaW5nIHNwb29ucwpDYWxpYnJhdGluZy
  Bqb3lzdGljawpEZXBsb3lpbmcgcmVwbGljYXRvcnMKQ29tcGxldGluZyByZXNlYXJjaApEZWJhdGlu
  ZyBkZXRlcm1pbmlzbQpBbGlnbmluZyBwcmlzbWF0aWMgYmVhbXMKU3VtbWluZyBzZXJpZXMKUmVwYW
  lyaW5nIHRpbWVsaW5lCkVuZ2FnaW5nIHByaXNtYXRpYyBjb3JlClN0cmFwcGluZyBpbgpDb21waWxp
  bmcgc2hhZGVycwpDb21wdXRpbmcgZGlnaXRzIG9mIM+AClNjYWxpbmcgd2F0ZXJmYWxscwpEZWZyYW
  dnaW5nIGhhcmQgZHJpdmUKU2V0dGluZyB0aW1lIGNpcmN1aXRzCkJlY29taW5nIGEgc3BlY3RyZQpT
  ZWVraW5nIGd1aWRhbmNlCkJ1aWxkaW5nIHRoZSBmb3VuZGF0aW9uClJlYWR5aW5nIHN5c3RlbXMKUm
  V3aXJpbmcgc3RhcnNoaXAKUHJlcGFyaW5nIExDTCBwbHVnClJlZGVlbWluZwpTdGFiaWxpemluZyB3
  YXJwIGZpZWxkcwpCdWNrbGluZyB1cApGZWVkaW5nIHNwYWNlIGhhbXN0ZXIKR2F0aGVyaW5nIHN0cm
  VuZ3RoCkdyYXBoaW5nIHBhcmFib2xhcwpBd2FpdGluZyB2aWN0b3J5CklucHV0dGluZyBjb29yZGlu
  YXRlcwpMYXVuY2hpbmcgcHJvYmUKRGVjcnlwdGluZyBkYXRhY3ViZXMKTGlmdGluZyB3ZWlnaHRzCk
  Rvd25sb2FkaW5nIGV4cGFuc2lvbgpCYXNraW5nIGluIHRoZSB0d2lsaWdodApDaGFubmVsaW5nIGxp
  Z2h0CkRpdmVydGluZyBwb3dlcgpSb2xsaW5nIGZvciBpbml0aWF0aXZlCkxvY2tpbmcgc3BhY2UtdG
  ltZSBjb29yZGluYXRlcwpNYW5pZmVzdGluZyBkZXN0aW55ClF1ZXN0aW9uaW5nIGV4aXN0ZW5jZQpQ
  bGFubmluZyByZWJlbGxpb24KQ2FsaWJyYXRpbmcgZ2lhbnQgZ3VucwpVbmxvY2tpbmcgYWNoaWV2ZW
  1lbnRzCkNvbnNpZGVyaW5nIHBhcmFkb3hlcwpCeXBhc3Npbmcgc2lsaWNvbgpJbnZlcnRpbmcgdHJh
  bnNwb25kZXJzClJlcG9ydGluZyBpbgpBY2tub3dsZWRnaW5nIG9yZGVyClNjYWxpbmcgd2FsbApTbW
  VsdGluZyBvcmVzClRhbWluZyBjYXRzCkNvbXBsZXRpbmcgZXZvbHV0aW9uCkFuc3dlcmluZyB0aGUg
  cGhvbmUKQ29tcGx5aW5nCkNvbnN1bHRpbmcgZ3VpZGUKRGVwbG95aW5nIE9ETSBnZWFyClJlY2xhaW
  1pbmcgQWl1cgpVcGdyYWRpbmcgY3liZXJ3YXJlClVwZ3JhZGluZyBiaW90aWMgYW1wcwpUYWtpbmcg
  Y2FyZSBvZiBpdApQbG90dGluZyBjb3Vyc2UKQ29tbWVuY2luZyBvcGVyYXRpb25zClNvcnRpbmcgaW
  50byBob3VzZXMKQ2xpbWJpbmcgc2hlZXIgY2xpZmZzCk92ZXJ3aGVsbWluZyBwb3dlcgpSZWFjaGlu
  ZyBGVEwKU2VlaW5nIGNvZGUKUG9saXNoaW5nIENQVXMKTWFraW5nIHBlYWNlCkNvbmZpcm1pbmcgZG
  lyZWN0aXZlCkxlYXJuaW5nIGt1bmcgZnUKU3RyaWtpbmcgYXMgb25lCkNoYXNpbmcgcmVwbGljYW50
  cwpCYWxhbmNpbmcgZXF1YXRpb25zCkNoYXJnaW5nIGZsdXggY2FwYWNpdG9yCkV4ZWN1dGluZwpPdm
  VyZmxvd2luZyBzdGFjawpSZWNlaXZpbmcgY29vcmRpbmF0ZXMKSGFydmVzdGluZyB2ZXNwZW5lIGdh
  cwpSZWNvbXBpbGluZyBrZXJuZWwKQ29tcGlsaW5nIGJpbmFyaWVzClNjYW5uaW5nIG9wdGljcwpBZG
  p1c3RpbmcgcG93ZXIgbGV2ZWwKRXNjYXBpbmcgY2FyYm9uaXRlClJ1bm5pbmcgZGlhZ25vc3RpY3MK
  VHVuaW5nIGRpbWVuc2lvbmFsIHN0cmluZ3MKQnJld2luZyBzdG9ybQpCcmV3aW5nIHBvdGlvbnMKU3
  Bhd25pbmcgbW9yZSBvdmVybG9yZHMKSmlnZ2xpbmcgaW50ZXJuZXQKQ2hhcmdpbmcgSEVWIHN1aXQK
  U2F2aW5nIHRoZSBnYWxheHkKU3RlYWR5aW5nIGNocm9ub21ldHJpY3MKU2ltdWxhdGluZyBjb25zY2
  lvdXNuZXNzClJhaXNpbmcgc2hpZWxkcwpNaW5pbmcgZm9yIGJpdGNvaW5zClNjYW5uaW5nIGZvciBl
  bGVtZW50cwpBdm9pZGluZyBwYXJhZG94ZXMKQXZvaWRpbmcgYW5vbWFsaWVzCkxlYWRpbmcgdGhlIH
  dheQpTZWVraW5nIHNlbGYKQmVhbWluZyBkb3duClN1bW1vbmluZyBlbGVtZW50YWxzCkxvY2tpbmcg
  bmF2LWNvbW0KRXhwbG9yaW5nIGZyYWN0YWxzCkV4cGxvcmluZyBhbmNpZW50IHRvbWJzCk9yZGVyaW
  5nIGRyaW5rcwpTYWZlZ3VhcmRpbmcgdGhlIGZ1dHVyZQpTeW50aGVzaXppbmcgZHJpdmVycwpFbnRl
  cmluZyBjb25zdHJ1Y3QKVHVuaW5nIHJheSB0cmFjaW5nCkNvbW1lbmNpbmcKQWxpZ25pbmcgcHJvdG
  9jb2xzCkV2YWRpbmcgc2VudGluZWxz
`;

export const loadingMessages = atob(messages.replace(/\s+/g, '')).split('\n');
