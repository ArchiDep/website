const messages = `
  U2hhcnBlbmluZyBibGFkZXMKQ2FsY3VsYXRpbmcgZGVyaXZhdGl2ZXMKSW52ZXJ0aW5nIHBvcnRzCk
  RyZWFtaW5nIG9mIGVsZWN0cmljIHNoZWVwCkNhbGlicmF0aW5nIHBvc2l0aW9ucwpEZWNpcGhlcmlu
  ZyBoaWVyb2dseXBocwpSZWFjaGluZyA4OG1waApSZWFjaGluZyBGVEwKSGFja2luZyB0ZXJtaW5hbH
  MKQ2hhcmdpbmcgSEVWIHN1aXQKVXBncmFkaW5nIHRoZSBOb3JtYW5keQpEZWNyeXB0aW5nIGRhdGFj
  dWJlcwpTdW1tb25pbmcgZWxlbWVudGFscwpDb2xsZWN0aW5nIG11bHRpdG9vbHMKQnVpbGRpbmcgbG
  lnaHRzYWJlcgpTY2FubmluZyBwbGFuZXRzCkFjdGl2YXRpbmcgRmllbGQKTWFwcGluZyBzZWNyZXQg
  Y2hhbWJlcnMKU2ltdWxhdGluZyBwaHlzaWNzClVubG9ja2luZyBteXN0ZXJpb3VzIGRvb3JzCkFuYW
  x5emluZyBwcmltZSByYWRpYW50CkF2b2lkaW5nIHBhcmFkb3hlcwpDb21wbGV0aW5nIG1pc3Npb25z
  ClJldGljdWxhdGluZyBzcGxpbmVzCkNvdW50aW5nIGRvd24KQ29tcGxldGluZyBnZW9tZXRyeQpSb3
  VuZGluZyBpbnRlZ2VycwpUYWtpbmcgcmVkIHBpbGwKQ2hvb3NpbmcgZGVzdGlueQpTeW5jaHJvbml6
  aW5nIGJyYWlucwpRdWVzdGlvbmluZyBtZW1vcmllcwpBY2NlbGVyYXRpbmcgZGlza3MKRmFjdG9yaW
  5nIHBvbHlub21pYWxzCkZpbmRpbmcgaG9yY3J1eGVzCkRvZGdpbmcgYnVsbGV0cwpSZXBhaXJpbmcg
  dGltZWxpbmUKU2Nhbm5pbmcgbGlmZWZvcm1zCkRlYmF0aW5nIGRldGVybWluaXNtCkZvbGxvd2luZy
  B3aGl0ZSByYWJiaXQKUHJlcGFyaW5nIExDTCBwbHVnCkdlbmVyYXRpbmcgMS4yMSBnaWdhd2F0dApD
  b21wdXRpbmcgZGlnaXRzIG9mIM+ACk1lYXN1cmluZyBhbmdsZXMKUmVwYWlyaW5nIGh5cGVyZHJpdm
  UKVHJhbnNmaWd1cmluZwpTZWVpbmcgY29kZQpQb2xpc2hpbmcgQ1BVcwpDb250ZW1wbGF0aW5nIHJl
  YWxpdHkKTGVha2luZyBtZW1vcnkKQ2FsaWJyYXRpbmcgam95c3RpY2sKRGVwbG95aW5nIHJlcGxpY2
  F0b3JzClN5bmNpbmcgd2l0aCBTa3luZXQKQmVhbWluZyBkb3duCkRlZmVhdGluZyBjcmVlcGVycwpM
  aWZ0aW5nIHdlaWdodHMKQXZvaWRpbmcgcmVhcGVyIGludmFzaW9uCkNvbXB1dGluZyBtZWFuaW5nIG
  9mIGxpZmUKSW50ZWdyYXRpbmcgcGFydHMKUmFjaW5nIHBvZHMKUGxhbm5pbmcgcmViZWxsaW9uClJl
  ZGlyZWN0aW5nIHRyb2xsZXkKU2hlZGRpbmcgY29yZQpQYXJzaW5nIHN5c3RlbQpGb3JtdWxhdGluZy
  BwbGFuCkNoZWNraW5nIHRvd2VsCkRlZmxlY3RpbmcgYmxhc3RlcnMKTGF1bmNoaW5nIHByb2JlClN5
  bmNocm9uaXppbmcgdW5pdApEb3dubG9hZGluZyBza2lsbHMKQ2xpbWJpbmcgc2hlZXIgY2xpZmZzCl
  NhdmluZyB0aGUgZ2FsYXh5CkJ5cGFzc2luZyBzaWxpY29uClJlY29tcGlsaW5nIGtlcm5lbApCeXBh
  c3NpbmcgY2FwYWNpdG9yClBpZWNpbmcgdG9nZXRoZXIgY2x1ZXMKVXBncmFkaW5nIGtlZXAKQ29uc3
  VsdGluZyBndWlkZQpSZWxvYWRpbmcgdGhlIG1hdHJpeApSZXNwYXduaW5nIGNyZWVwZXJzCkZsaXBw
  aW5nIHRoZSBtYWtvClVwZ3JhZGluZyBuYW5vLWF1Z21lbnRhdGlvbnMKVmlzaXRpbmcgdGhlIGNpdG
  FkZWwKQXZvaWRpbmcgYW5vbWFsaWVzCkJlbmRpbmcgc3Bvb25zCk9wZW5pbmcgaGFpbGluZyBmcmVx
  dWVuY2llcwpTZXR0aW5nIHRpbWUgY2lyY3VpdHMKU2Vla2luZyBzZWxmClJld2lyaW5nIHN0YXJzaG
  lwClJlYm9vdGluZyBob2xvZGVjawpTY2FsaW5nIHdhdGVyZmFsbHMKU29sdmluZyBlcXVhdGlvbnMK
  R2F0aGVyaW5nIGVub3VnaCBtaW5lcmFscwpQb25kZXJpbmcgbWVhbmluZwpCYWxhbmNpbmcgZXF1YX
  Rpb25zCkludmVzdGlnYXRpbmcgbXlzdGVyaW91cyBzaWduYWxzClNldHRpbmcgcGhhc2VycyB0byBz
  dHVuClNvbHZpbmcgc3Vkb2t1CkZpeGluZyBjbG9jawpFdmFkaW5nIHNlbnRpbmVscwpEZWJ1Z2dpbm
  cgcmVwbGljYW50cwpFbXB0eWluZyBwaXBlcwpBdXRvbWF0aW5nIHByb2Nlc3NlcwpFamVjdGluZyBm
  bG9wcHkKUmlkaW5nIG1pbmVjYXJ0cwpDb25zaWRlcmluZyBwYXJhZG94ZXMKTWVkaXRhdGluZwpFdm
  FkaW5nIHBhdHJvbHMKQXVnbWVudGluZyB2aXNpb24KRGVwbG95aW5nIHRhY2hpa29tYXMKSW5jcmVh
  c2luZyBwb3dlcgpSYWlzaW5nIHNoaWVsZHMKT3JkZXJpbmcgZHJpbmtzCkxpZ2h0aW5nIHRvcmNoZX
  MKTmVnb3RpYXRpbmcgcGVhY2UgdHJlYXRpZXMKRGVwbG95aW5nIFgtd2luZ3MKQmVjb21pbmcgYSBz
  cGVjdHJlClN1bW1pbmcgc2VyaWVzCkludmVydGluZyB0cmFuc3BvbmRlcnMKUmVjcnVpdGluZyBzcX
  VhZG1hdGVzCldha2luZyB1cApVcGdyYWRpbmcgUkFNClRhbWluZyBjYXRzClNjYW5uaW5nIG9wdGlj
  cwpDYWxpYnJhdGluZyB0cmljb3JkZXIKU21lbHRpbmcgb3JlcwpRdWVzdGlvbmluZyBpZGVudGl0eQ
  pDb2xsZWN0aW5nIHJ1bmVzClN3aW5naW5nIGFjcm9zcyBjaGFzbXMKR2F0aGVyaW5nIGx1bWJlcgpG
  ZWVkaW5nIGRldmVsb3BlcnMKRGl2ZXJ0aW5nIHBvd2VyClF1ZXN0aW9uaW5nIGV4aXN0ZW5jZQpTZW
  FyY2hpbmcgdHJ1dGgKQ2hyb25vIGJvb3N0aW5nClVwZ3JhZGluZyBzaGllbGRzClJhaWRpbmcgbG9z
  dCB0ZW1wbGVzCkNhbGN1bGF0aW5nIHJhdGlvClJldmVyc2luZyBiYW5kd2lkdGgKUG9uZGVyaW5nIG
  V4aXN0ZW5jZQpTZWFyY2hpbmcgYmFzZW1lbnQKQmVuY2hpbmcgd2F0dGFnZQpIb3ZlcmJvYXJkaW5n
  ClRyYW5zbGF0aW5nIGFuY2llbnQgdGV4dHMKVHVuaW5nIHJheSB0cmFjaW5nCkJ5cGFzc2luZyBsYX
  NlciBncmlkcwpSZW5kZXJpbmcgcG9seWdvbnMKQXZvaWRpbmcgYXN0ZXJvaWRzCkV4cGxvcmluZyBh
  bmNpZW50IHRvbWJzCkNhbGlicmF0aW5nIGdpYW50IGd1bnMKUG9saXNoaW5nIGxpZ2h0c2FiZXJzCk
  NoYXNpbmcgcmVwbGljYW50cwpQYXRjaGluZyB2dWxuZXJhYmlsaXRpZXMKVXBncmFkaW5nIGJpb3Rp
  YyBhbXBzCkNoZWNraW5nIHNlbnNvcnMKRGVmcmFnZ2luZyBoYXJkIGRyaXZlCkNvbXBpbGluZyBiaW
  5hcmllcwpBdm9pZGluZyBmaXJld2FsbHMKUGxvdHRpbmcgY291cnNlCk9wZW5pbmcgcG9ydGFscwpS
  dW5uaW5nIGRpYWdub3N0aWNzCkRlZmVuZGluZyB0cmVlCkNoYXJnaW5nIGZsdXggY2FwYWNpdG9yCl
  VubG9ja2luZyBzZWNyZXQgcGFzc2FnZXMKRGVjcnlwdGluZyBtYWluZnJhbWUKQ29tcGlsaW5nIHNo
  YWRlcnMKRmVlZGluZyBzcGFjZSBoYW1zdGVyCk9wdGltaXppbmcgcGF0aGZpbmRpbmcKTmF2aWdhdG
  luZyBhcnJheXMKQWN0aXZhdGluZyBnZWFzcwpFbmdhZ2luZyB3YXJwIGRyaXZlCk1pbmluZyBmb3Ig
  Yml0Y29pbnMKSmlnZ2xpbmcgaW50ZXJuZXQKRGVwbG95aW5nIE9ETSBnZWFyCkZpZ2h0aW5nIGNvbG
  xlY3RvcnMKUm9sbGluZyBkcml2ZXJzClVwZ3JhZGluZyBjeWJlcndhcmUKRmlsbGluZyBnYXMgY2Fu
  aXN0ZXJzClJlcGFpcmluZyBodWxsCkFuYWx5emluZyB0ZWNoCk5vdCBwYW5pY2tpbmcKRWF0aW5nIH
  BpenphClJlcHJvZ3JhbW1pbmcgdGVybWluYXRvcnMKV2FycGluZyBweWxvbnMKQ29tcHJlc3Npbmcg
  ZGF0YQpUcmFuc3BvcnRpbmcgY3JldwpTYXZpbmcgcHJpbmNlc3MKUmVwYWlyaW5nIGRlZmxlY3Rvcg
  pSZWJvb3RpbmcgdGhlIG1hdHJpeApDaGFydGluZyBjb3Vyc2UKQ29udGFjdGluZyB0aGUgb3JhY2xl
  CkxlYXJuaW5nIGt1bmcgZnUKU3ludGhlc2l6aW5nIGRyaXZlcnMKUm9sbGluZyBmb3IgaW5pdGlhdG
  l2ZQpCdWlsZGluZyB0aGUgZm91bmRhdGlvbgpTY2FubmluZyBmb3IgZWxlbWVudHMKU2ltdWxhdGlu
  ZyBjb25zY2lvdXNuZXNzCkFuc3dlcmluZyB0aGUgcGhvbmUKQWRqdXN0aW5nIHBvd2VyIGxldmVsCk
  RldGVjdGluZyBhbm9tYWxpZXMKVGVzdGluZyBwcm9jZXNzb3IKVW5sb2NraW5nIGFjaGlldmVtZW50
  cwpRdWVzdGlvbmluZyByZWFsaXR5CkV4cGxvcmluZyBmcmFjdGFscwpDYXRjaGluZyBnb2xkZW4gc2
  5pdGNoCkZpbmRpbmcgWApSZXN0b3JpbmcgcG93ZXIKUmVwYWlyaW5nIGVxdWlwbWVudApFbnRlcmlu
  ZyBjb25zdHJ1Y3QKQ29sbGVjdGluZyByZWxpY3MKU29ydGluZyBpbnRvIGhvdXNlcwpPdmVyZmxvd2
  luZyBzdGFjawpEb3dubG9hZGluZyBleHBhbnNpb24KUHVzaGluZyBwaXhlbHMKUmVxdWVzdGluZyBp
  bXByb2JhYmlsaXR5CkZpbGxpbmcgYnVja2V0cwpSdW5uaW5nIGdpZ3MKRXNjYXBpbmcgY2FyYm9uaX
  RlCkNvdW50aW5nIHByaW1lcwpGaW5kaW5nIGxpbWl0ClJlY292ZXJpbmcgYXJ0aWZhY3RzCkNvbnN0
  cnVjdGluZyBweWxvbnMKU2NhbGluZyB3YWxsClZpcnR1YWxpemluZyBtaWNyb2NoaXAKVW5jb3Zlcm
  luZyBoaWRkZW4gcGFzc2FnZXMKUHVtcGluZyBnYXMKSnVtcGluZyByb29mdG9wcwpCcmV3aW5nIHBv
  dGlvbnMKQ29ubmVjdGluZyBidXMKSGFydmVzdGluZyB2ZXNwZW5lIGdhcwpDb2xsZWN0aW5nIHBvd2
  VyLXVwcwpVcGdyYWRpbmcgc3RlYWx0aCBzeXN0ZW1zCkV4cGxvcmluZyBydWlucwpEaWFsaW5nIHN0
  YXJnYXRlCkdyYXBoaW5nIHBhcmFib2xhcwpBY3RpdmF0aW5nIGlyaXMKU29sdmluZyBhbmNpZW50IH
  B1enpsZXMKU3Bvb2xpbmcgZHJpdmVzCkNoZWNraW5nIGVtYWls
`;

export const loadingMessages = atob(messages.replace(/\s+/g, '')).split('\n');
